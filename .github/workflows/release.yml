name: Release ZTM Cli

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
    branches:
      - pr-ci
env:
  PKG_NAME: ztm
  S3_PATH: repo/ztm

defaults:
  run:
    shell: bash

jobs:
  set-release-version:
    name: set-release-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set RELEASE_VERSION
        id: version
        run: |
          pwd
          ls -l
          CI_COMMIT_DATE=$(git log -1 --format="%ad" --date=format:"%Y%m%d%H%M")
          echo "CI_COMMIT_DATE=${CI_COMMIT_DATE}" >> $GITHUB_ENV
          git fetch --tags
          RELEASE_VERSION=`git name-rev --tags --name-only $(git rev-parse HEAD)`
          if [ $RELEASE_VERSION = 'undefined' ]
          then
              echo "release_version=nightly-${CI_COMMIT_DATE}" >> $GITHUB_OUTPUT
              echo "version=nightly" >> $GITHUB_OUTPUT
              echo "commit_date=${CI_COMMIT_DATE}" >> $GITHUB_OUTPUT
          else
              echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
              echo "commit_date=${CI_COMMIT_DATE}" >> $GITHUB_OUTPUT
          fi

          CI_COMMIT_SHA=$(git log -1 --format=%H)
          echo "commit_sha=$CI_COMMIT_SHA"  >> $GITHUB_OUTPUT

      - name: Show envs
        run: export
    outputs:
      release_version: ${{steps.version.outputs.release_version}}
      commit_date: ${{steps.version.outputs.commit_date}}
      commit_sha: ${{steps.version.outputs.commit_sha}}

  build-ztm-cli-linux-x86_64:
    needs: set-release-version
    name: build-ztm-cli-x86_64
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build
        id: build
        env:
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
          ZTM_VERSION: ${{needs.set-release-version.outputs.release_version}}
          ZTM_COMMIT_SHA: ${{needs.set-release-version.outputs.commit_sha}}
          ZTM_COMMIT_DATE: ${{needs.set-release-version.outputs.commit_date}}
        run: |
          mkdir bin
          touch bin/ztm
          tar zcvf ztm-cli-${ZTM_VERSION}-generic_linux-x86_64.tar.gz bin/ztm

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ztm-cli-${{needs.set-release-version.release_version}}-generic_linux-x86_64.tar.gz
          path: ztm-cli-${{needs.set-release-version.release_version}}-generic_linux-x86_64.tar.gz
      

  build-ztm-cli-linux-arm64:
    needs: set-release-version
    name: build-ztm-cli-arm64
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build
        id: build
        env:
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
          ZTM_VERSION: ${{needs.set-release-version.outputs.release_version}}
          ZTM_COMMIT_SHA: ${{needs.set-release-version.outputs.commit_sha}}
          ZTM_COMMIT_DATE: ${{needs.set-release-version.outputs.commit_date}}
        run: |
          mkdir bin
          touch bin/ztm
          tar zcvf ztm-cli-${ZTM_VERSION}-generic_linux-arm64.tar.gz bin/ztm

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ztm-cli-${{needs.set-release-version.release_version}}-generic_linux-arm64.tar.gz
          path: ztm-cli-${{needs.set-release-version.release_version}}-generic_linux-arm64.tar.gz


  create-release:
    name: create release
    runs-on: ubuntu-20.04
    needs:
      - build-ztm-cli-linux-x86_64
      - build-ztm-cli-linux-arm64
    steps:
      - name: Create draft release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          omitBody: true
          tag: ${{steps.version.outputs.release_version}}

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Check downloads
        run: |
          ls -al

  # build-ztm-cli-linux-x86_64:
  #   needs: set-release-version
  #   name: build-ztm-cli
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: Build
  #       id: build
  #       env:
  #         RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
  #         ZTM_VERSION: ${{needs.set-release-version.outputs.release_version}}
  #         ZTM_COMMIT_SHA: ${{needs.set-release-version.outputs.commit_sha}}
  #         ZTM_COMMIT_DATE: ${{needs.set-release-version.outputs.commit_date}}
  #       run: |
  #         set -x
  #         ./build.sh
  #         ls -al

  # build-ztm-cli-linux-arm64:
  #   needs: set-release-version
  #   name: build-ztm-cli
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: docker/setup-qemu-action@v3
  #     - uses: docker/setup-buildx-action@v3

  #     - name: Build
  #       env:
  #         RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
  #         ZTM_VERSION: ${{needs.set-release-version.outputs.release_version}}
  #         ZTM_COMMIT_SHA: ${{needs.set-release-version.outputs.commit_sha}}
  #         ZTM_COMMIT_DATE: ${{needs.set-release-version.outputs.commit_date}}
  #       run: |
  #         docker buildx build \
  #           --platform=linux/arm64 \
  #           --output type=docker \
  #           -t build-ztm:latest \
  #           -f build/Dockerfile.arm-ci \
  #           --build-arg RELEASE_VERSION=$RELEASE_VERSION \
  #           --build-arg ZTM_VERSION=$ZTM_VERSION \
  #           --build-arg ZTM_COMMIT_SHA=$ZTM_COMMIT_SHA \
  #           --build-arg ZTM_COMMIT_DATE="$ZTM_COMMIT_DATE" \
  #           .

  #         docker images

  #         docker create --name=builder build-ztm:latest 

